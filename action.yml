name: 'Action for auditing Trivy scan results'
description: 'This action automatically creates audit records for Trivy scan results'
author: 'Fatih Tokus'
inputs:
  scan-results-file:
    description: 'Where to find scan result json file'
    required: true
    default: 'results.json'
  auditing-folder-path:
    description: 'Which folder to store auditing results'
    required: true
    default: 'auditing'
  auditing-branch:
    description: 'Which branch to store auditing results'
    required: true
    default: 'auditing'
runs:
  using: "composite"
  steps:
    - id: parameters
      shell: bash
      run: |
        echo "----PARAMETERS------------------------------------------------------"

        SCAN_RESULT_FOLDER_RELATIVE_PATH="scan-results"
        echo "SCAN_RESULT_FOLDER_RELATIVE_PATH=$SCAN_RESULT_FOLDER_RELATIVE_PATH" >> $GITHUB_OUTPUT
        
        SCAN_RESULT_FOLDER="${{ inputs.auditing-folder-path }}/$SCAN_RESULT_FOLDER_RELATIVE_PATH"
        echo "SCAN_RESULT_FOLDER=$SCAN_RESULT_FOLDER" >> $GITHUB_OUTPUT

        EVENT_FOLDER_FOLDER_RELATIVE_PATH="events"
        echo "EVENT_FOLDER_FOLDER_RELATIVE_PATH=$EVENT_FOLDER_FOLDER_RELATIVE_PATH" >> $GITHUB_OUTPUT
        
        EVENT_FOLDER="${{ inputs.auditing-folder-path }}/events"
        echo "EVENT_FOLDER=$EVENT_FOLDER" >> $GITHUB_OUTPUT
        
        AUDITING_ITEM="${{ inputs.auditing-folder-path }}/auditing_item.json"
        echo "AUDITING_ITEM=$AUDITING_ITEM" >> $GITHUB_OUTPUT
        
        TEMP_AUDITING_FILE="${{ inputs.auditing-folder-path }}/temp_auditing.json"
        echo "TEMP_AUDITING_FILE=$TEMP_AUDITING_FILE" >> $GITHUB_OUTPUT
        
        AUDITING_FILE="${{ inputs.auditing-folder-path }}/auditing.json"
        echo "AUDITING_FILE=$AUDITING_FILE" >> $GITHUB_OUTPUT    
        
        ACTION_START_TIME=$(date +%s)
        echo "ACTION_START_TIME=$ACTION_START_TIME" >> $GITHUB_OUTPUT

        SCAN_RESULT_FILE_RELATIVE_PATH="$SCAN_RESULT_FOLDER_RELATIVE_PATH/result-$ACTION_START_TIME.json"
        echo "SCAN_RESULT_FILE_RELATIVE_PATH=$SCAN_RESULT_FILE_RELATIVE_PATH" >> $GITHUB_OUTPUT
        
        SCAN_RESULT="$SCAN_RESULT_FOLDER/result-$ACTION_START_TIME.json"
        echo "SCAN_RESULT=$SCAN_RESULT" >> $GITHUB_OUTPUT

        EVENT_DETAIL_FILE_RELATIVE_PATH="$EVENT_FOLDER_FOLDER_RELATIVE_PATH/event-$ACTION_START_TIME.json"
        echo "EVENT_DETAIL_FILE_RELATIVE_PATH=$EVENT_DETAIL_FILE_RELATIVE_PATH" >> $GITHUB_OUTPUT
        
        EVENT_DETAIL="$EVENT_FOLDER/event-$ACTION_START_TIME.json"
        echo "EVENT_DETAIL=$EVENT_DETAIL" >> $GITHUB_OUTPUT
    - name: qqq11
      shell: bash
      run: |
        echo "----before scan2html------------------------------------------------------"
        pwd
        ls
    - name: Checkout folder Scan2html 🛎️
      uses: actions/checkout@v3
      with:
        repository: fatihtokus/scan2html
        ref: Issue-9
        path: scan2html 
    - name: qqq
      shell: bash
      run: |
        echo "----scan2html------------------------------------------------------"
        pwd
        ls
        ls scan2html
        ls scan2html/src
    - name: Checkout folder "${{ inputs.auditing-folder-path }}" on branch "${{ inputs.auditing-branch }}" 🛎️
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.auditing-branch }}
        path: ${{ inputs.auditing-folder-path }}
    - name: qqq1
      shell: bash
      run: |
        echo "----auditing branch------------------------------------------------------"
        pwd
        ls
        ls scan2html
        ls scan2html/src
    - name: Creating auditing folders
      shell: bash
      run: |
        echo "----Creating auditing folders------------------------------------------------------"
        mkdir -p ${{steps.parameters.outputs.SCAN_RESULT_FOLDER}}
        echo "${{steps.parameters.outputs.SCAN_RESULT_FOLDER}} has been created!"
        mkdir -p ${{steps.parameters.outputs.EVENT_FOLDER}}
        echo "${{steps.parameters.outputs.EVENT_FOLDER}} has been created!"
    - name: Copying static html and js files to the repo
      shell: bash
      run: |
        echo "----Copying static html and js files to the repo------------------------------------------------------"
        cp -r -v scan2html/src/* ${{ inputs.auditing-folder-path }}/
        echo "Static html and js files from scan2html/src/* to ${{ inputs.auditing-folder-path }} has been copied!"
    - name: Storing scan results
      shell: bash
      run: |
        echo "----Storing scan results------------------------------------------------------"
        cat "${{ inputs.scan-results-file }}" >>"${{steps.parameters.outputs.SCAN_RESULT}}"
        echo "${{steps.parameters.outputs.SCAN_RESULT}} has been created!"
    - name: Storing event details
      id: store_event_details
      shell: bash
      run: |
        echo "----Storing event details------------------------------------------------------"
        cat ${{ github.event_path }}>>"${{steps.parameters.outputs.EVENT_DETAIL}}"    
        echo "${{steps.parameters.outputs.EVENT_DETAIL}} has been created!"
    - name: Creating Scan Details
      shell: bash
      run: |
        echo "----Creating Scan Details------------------------------------------------------"
        cat 
        {
           echo '{'
           echo '"Id": "${{steps.parameters.outputs.ACTION_START_TIME}}",'
           echo '"Url": "${{steps.parameters.outputs.SCAN_RESULT_FILE_RELATIVE_PATH}}",'
           echo '"Sha": "${{ github.sha }}",'
           echo '"Initiator": "${{ github.triggering_actor }}",'
           echo '"Ref": "${{ github.ref }}",'
           echo '"Event_Name": "${{ github.event_name }}",'
           echo '"Event_Path": "${{ steps.parameters.outputs.EVENT_DETAIL_FILE_RELATIVE_PATH }}"'
           echo '},'
         }  >>"${{steps.parameters.outputs.AUDITING_ITEM}}"
        
         echo "${{steps.parameters.outputs.AUDITING_ITEM}} has been created!"
    - name: Adding Scan Details to Audit db
      shell: bash
      run: |
        echo "----Adding Scan Details to Audit db------------------------------------------------------"
        audit_file_content="abc.json"
        if [ -f ${{steps.parameters.outputs.AUDITING_FILE}} ]; then
           echo "${{steps.parameters.outputs.AUDITING_FILE}} does exist!"
           cat "${{steps.parameters.outputs.AUDITING_FILE}}" >>"$audit_file_content"
        fi
        if [ ! -f ${{steps.parameters.outputs.AUDITING_FILE}} ]; then
           echo "${{steps.parameters.outputs.AUDITING_FILE}} doesn't exist, creating an empty one!"
           cat 
            {
             echo '{'
             echo '"Pushes" : ['
             echo ']}'
        
           }  >>"$audit_file_content"
        fi
        
        # copy audit file except the last line which is '}' character of json 
        head -n -1 "$audit_file_content" > "${{steps.parameters.outputs.AUDITING_FILE}}"
        cat "${{steps.parameters.outputs.AUDITING_ITEM}}" >>"${{steps.parameters.outputs.AUDITING_FILE}}"
        cat 
        {
           echo ''
           echo ']}'
         } >>"${{steps.parameters.outputs.AUDITING_FILE}}"
        echo "${{steps.parameters.outputs.AUDITING_FILE}} has been created!"
        # remove tmp
        rm -f ${{steps.parameters.outputs.AUDITING_ITEM}}
        rm -f $audit_file_content
    - name: Deploy folder "${{ inputs.auditing-folder-path }}" to branch "${{ inputs.auditing-branch }}" 🚀
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: ${{ inputs.auditing-folder-path }}
        branch: ${{ inputs.auditing-branch }}
        clean: false
branding:
  icon: "git-pull-request"
  color: "purple"
